version: 0.2
phases:
  pre_build:
    commands:
      - echo `env`
      - echo Downloading artifact...
      - aws s3 cp s3://${ARTEFACTS_S3_NAME}/${CURRENT_PREFIX}/${VERSION_NAME}.zip ./
      - echo Unpacking artifact...
      - mkdir tmp
      - unzip -u ./${VERSION_NAME}.zip -d ./tmp
      - ls -ltr ./tmp
  build:
    commands:
      - echo Deployng the files to the ${S3_NAME} bucket
      - aws s3 cp --recursive ./tmp s3://${S3_NAME}/
      - echo All the files are been deployed
      - |
        if [[ "${CLOUDFRONT_ID}" != "" ]]; then
          echo Found AWS Cloudfront to create an invalidation to: ${CLOUDFRONT_ID}
          aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_ID} --paths "/*"
        fi
      - echo The AWS Cloudfront ${CLOUDFRONT_ID} has been updated
  post_build:
    commands:
      - echo Updating deployment table
      - |
        if [[ "${DYNAMODB_CICD_TABLE}" != "" && "${CODEBUILD_BUILD_SUCCEEDING}" == "1" ]]; then
          echo Found the deployment table
          CURRENT_DATETIME=`echo $(date '+%H:%M %Y.%m.%d')`
          aws dynamodb update-item --table-name ${DYNAMODB_CICD_TABLE} --key '{"Environment": {"S": "${CURRENT_ENV}_${CURRENT_APP}"}}' --update-expression "SET Version = :v, App = :a, D = :d, Env = :e" --expression-attribute-values '{":v": { "S": "${VERSION_NAME}.zip" },":a": { "S": "${CURRENT_APP}" }, ":d": { "S": "${CURRENT_DATETIME}" }, ":e": { "S": "${CURRENT_ENV}" }}'
        else
          echo The deployment table or current build result is not succeed.
        fi