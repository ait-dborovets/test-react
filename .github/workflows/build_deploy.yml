name: React_S3_Cloudfront

env:
  AWS_REGION: 'eu-central-1'  # Default AWS Region is eu-central-1

on:
  push:
    branches:
      - dev
      - master
  pull_request:
    branches:
      - dev
      - master

jobs:
  Build_App:
    runs-on: ubuntu-latest
    env : 
      CI: false
    
    steps:
      - name: Git clone
        uses: actions/checkout@v1

      - name: Build
        run: |
          sudo npm install npm -g
          npm install
          npm run build
      - name: Upload Artifact
        uses: actions/upload-artifact@master
        with:
          name: react_app
          path: build/

  S3_Bucket_push:
    if: "!contains(github.ref, 'pull')"
    runs-on: ubuntu-latest
    needs  : [Build_App]
    
    steps:
      - name: Set env vars (dev) # Set S3 bucket name for the DEV env
        if: endsWith(github.ref, '/dev')
        run: | 
          echo "S3_BUCKET=test-react-ait" >> $GITHUB_ENV 
      - name: Set env vars (prod) # Set S3 bucket name for the PROD env
        if: endsWith(github.ref, '/master')
        run: |
          echo "S3_BUCKET=test-react-ait-prod" >> $GITHUB_ENV

      - name: Git clone
        uses: actions/checkout@v1

      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: react_app
          path: build/

      # Configure AWS creds if Github secrets defined
      - name: Configure AWS creds with Github secrets
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id    : ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region           : ${{ env.AWS_REGION }}

      # Configures AWS creds with OpenID Connect if no secrets defined
      #- name: Configure AWS creds with OpenID Connect
      #  uses: aws-actions/configure-aws-credentials@v1
      #  with:
      #    role-to-assume   : arn:aws:iam::123456789:role/my-github-actions   # First, create and configure role (e.g. my-github-actions), provide proper Account ID
      #    role-session-name: githubactions
      #    aws-region       : ${{ env.AWS_REGION }}

      - name: Copy new files to S3 Bucket
        run : |
          echo "Copying new files to ${{ env.S3_BUCKET }} ..."
          aws s3 sync ./build s3://${{ env.S3_BUCKET }}/ --delete
          if [ $? -eq 0 ]; then
            echo "Files to ${{ env.S3_BUCKET }} were copied successfully"
          else
            echo "An error occur while copying files to ${{ env.S3_BUCKET }}"
            exit 1
          fi

  CF_INVALIDATION:
    if: "!contains(github.ref, 'pull')"
    runs-on: ubuntu-latest
    needs: [S3_Bucket_push]

    steps:
      - name: Set env vars (dev) # Set CF distribution name for the DEV env
        if: endsWith(github.ref, '/dev')
        run: |
          echo "CF_DISTR=EAK071V1Y83IX" >> $GITHUB_ENV
      - name: Set env vars (prod) # Set CF distribution name for the PROD env
        if: endsWith(github.ref, '/master')
        run: |
          echo "CF_DISTR=E35X06I21HGQHZ" >> $GITHUB_ENV

      # Configure AWS creds if Github secrets defined
      - name: Configure AWS creds with Github secrets
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id    : ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region           : ${{ env.AWS_REGION }}

      # Configures AWS creds with OpenID Connect if no secrets defined
      #- name: Configure AWS creds with OpenID Connect
      #  uses: aws-actions/configure-aws-credentials@v1
      #  with:
      #    role-to-assume   : arn:aws:iam::123456789:role/my-github-actions   # First, create and configure role (e.g. my-github-actions), provide proper Account ID
      #    role-session-name: githubactions
      #    aws-region       : ${{ env.AWS_REGION }}

      - name: Refresh Cloudfront
        run : |
          echo "Invalidating CloudFront ${{ env.CF_DISTR }}..."
          aws cloudfront create-invalidation --distribution-id ${{ env.CF_DISTR }} --paths "/*"
          if [ $? -eq 0 ]; then
            echo "Cloudfront ${{ env.CF_DISTR}} was successfully invalidated"
          else
            echo "An error occur while invalidating Cloudfront"
            exit 1
          fi
